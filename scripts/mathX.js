const MathX = (function () {
  // вычисление N-го числа в ряду Фибоначчи
  const fibonacciNth = (n) => {
    if (n <= 1) return n; // первые два числа в ряду Фибоначчи равны 0 и 1

    let a = 0, // инициализация переменных для хранения двух последних чисел
      b = 1;
    // начинам с 2 т.к. первые два числа уже известны, продолжаем до n
    for (let i = 2; i <= n; i++) {
      const temp = a + b; // присваиваем сумму
      a = b; // обновляем значения
      b = temp;
    }
    return b;
  };

  // вычисление всех чисел в ряду Фибоначчи до числа N
  const fibonacciSeries = (n) => {
    // создаем массив для хранения чисел
    const series = [0, 1];
    for (let i = 2; i <= n; i++) {
      // вызываем fibonacciNth(i) в каждой итерации цикла, которая вычисляет i-ое число в ряду Фибоначчи и добавляет результат в массив series
      series.push(fibonacciNth(i));
    }
    return series;
  };

  // проверка на простое число
  const isPrime = (num) => {
    if (num <= 1) return false; // если число меньше или равно 1, оно не является простым
    if (num <= 3) return true; // числа 2 и 3 являются простыми

    if (num % 2 === 0 || num % 3 === 0) return false; // если число делится на 2 или 3, оно не является простым

    let i = 5; // используем оптимизацию, проверяя числа имеющие вид 6k +- 1, начинаем с 5 т.к. первое простое число после 3 это 5 (6 * 1 - 1)
    while (i * i <= num) {
      if (num % i === 0 || num % (i + 2) === 0) return false; // если num делится на i или i + 2 нацело, то функция возвращает false
      i += 6; // увеличиваем i на 6 для перехода к следующему потенциально простому числу
    }
    return true;
  };

  // вычисление N-го простого числа
  const primeNth = (n) => {
    if (n === 1) return 2; // если n = 1, то возвращаем 2 т.к. это первое простое число

    let count = 1; // создаем счетчик
    let num = 3; // инициализируем первое нечетное число простое число 3
    while (count < n) {
      // проверяем является ли текущее число простым
      if (isPrime(num)) {
        // если простое то увеличиваем счетчик
        count++;
        // если нашли число, то возвращаем его
        if (count === n) return num;
      }
      // увеличиваем текущее число на 2 т.к. простые числа начиная с 3 являются нечетными и четные можно не проверять
      num += 2;
    }
  };

  // вычисление всех простых чисел до числа N
  const primesUpToN = (n) => {
    const primes = []; // массив для хранения простых чисел
    if (n >= 2) primes.push(2); // если число больще/равно 2, то добавляем его в массив т.к. это первое простое число
    // начинаем с 3 и используем шаг 2, чтобы исключить четные числа
    for (let num = 3; num <= n; num += 2) {
      // проверяем является ли число простым, если да -> добавляем в массив простых чисел
      if (isPrime(num)) primes.push(num);
    }
    return primes;
  };

  return {
    isPrime,
    fibonacciNth,
    fibonacciSeries,
    primeNth,
    primesUpToN,
  };
})();

console.log(MathX.isPrime(6)); // результат: false
console.log(MathX.fibonacciNth(10)); // результат: 55 => f(10) = f(9) + f(8) => 0 1 1 2 3 5 8 13 21 34 55
console.log(MathX.fibonacciSeries(10)); // результат: [ 0, 1,  1,  2,  3, 5, 8, 13, 21, 34, 55 ]
console.log(MathX.primeNth(5)); // результат: 11
console.log(MathX.primesUpToN(20)); // результат: [ 2, 3, 5, 7, 11, 13, 17, 19 ]
